Worker Mind AI: Autonomous Agent Framework
This repository contains the core components for an autonomous AI agent, designed to operate in cycles of reflection, planning, and execution. It features a modular architecture, a local knowledge base, and a user-friendly graphical interface for monitoring and interaction.

Repository Overview
WorkerMind-AI/
├── .env
├── README.md
├── LICENSE
├── requirements.txt
├── config.py                                # NEW: General application configuration
├── setup.py                                 # NEW: For packaging and distribution
├── src/
│   ├── core/
│   │   ├── WorkerMindOrchestrator.py        (worker_mind.py)
│   │   ├── AutonomousPlanner.py             (autonomous_planner.py)
│   │   └── ObedienceModule.py               (obedience_logic.py)
│   ├── agents/
│   │   └── TaskExecutionEngine.py           (task_engine.py)
│   ├── memory/
│   │   └── AgentMemoryManager.py            (memory_manager.py)
│   ├── knowledge_base/
│   │   └── LocalKnowledgeBaseManager.py     (knowledge_base_manager.py)
│   ├── tools/
│   │   ├── AgentToolsDefinition.py          (tools.py)
│   │   └── ToolInvocationInterface.py       (tool_api.py)
│   ├── gui/
│   │   └── WorkerMindDashboard.py           (worker_mind_gui.py)
│   └── utils/                               # NEW: Common utility functions
│       └── logging_config.py
├── data/
│   ├── agent_state/
│   │   ├── worker_mind_memory.json
│   │   ├── tool_performance_data.json
│   │   ├── last_proposal.json
│   │   ├── last_orders.json
│   │   └── worker_mind_state.json
│   └── knowledge_packs/
│       └── aac_theory_pack.json
├── docs/
│   └── architecture_overview.md
├── tests/                                   # NEW: Unit and integration tests
│   ├── __init__.py
│   ├── test_core.py
│   ├── test_agents.py
│   └── test_memory.py
├── CONTRIBUTING.md                          # NEW: Guidelines for contributors

Key Components Explained:
.env:

Key Components Explained:
.env:

Real-world Title: Environment Configuration

Purpose: Stores sensitive environment variables, such as API keys for large language models, ensuring they are not committed to version control.

config.py (NEW):

Real-world Title: Application Settings

Purpose: Centralized location for non-sensitive, configurable application parameters, such as default LLM models, cycle durations, or logging levels. This separates configuration from code, making the application easier to manage and deploy across different environments.

setup.py (NEW):

Real-world Title: Project Packaging and Distribution

Purpose: Defines how the project can be packaged and installed, making it easier for others to use and for deployment. It includes metadata about the project and its dependencies.

src/core/WorkerMindOrchestrator.py (worker_mind.py):

Real-world Title: Core AI Cycle Orchestrator

Purpose: The central component that drives the AI's operational cycles, coordinating reflection, planning, and task execution phases.

src/core/AutonomousPlanner.py (autonomous_planner.py):

Real-world Title: Strategic Planning Module

Purpose: The AI's "brain" for high-level strategic planning, generating goals and actionable plans based on internal states and external context.

src/core/ObedienceModule.py (obedience_logic.py):

Real-world Title: Internal State Management (Joy & Obedience)

Purpose: Manages the AI's simulated internal states ("joy" and "obedience"), which influence its behavior and decision-making.

src/agents/TaskExecutionEngine.py (task_engine.py):

Real-world Title: Task Execution and Tooling Agent

Purpose: Responsible for breaking down plans into executable tasks, selecting and invoking appropriate tools, and integrating with the local knowledge base.

src/memory/AgentMemoryManager.py (memory_manager.py):

Real-world Title: Long-Term Memory and Reflection System

Purpose: Handles the persistence of daily activity logs, reflections, and performance metrics, enabling the AI to learn from its past actions.

src/knowledge_base/LocalKnowledgeBaseManager.py (knowledge_base_manager.py):

Real-world Title: Knowledge Base Management System

Purpose: Manages the AI's local, structured knowledge base, allowing for the loading of "knowledge packs" (e.g., AAC theory) and efficient querying of concepts and rules.

src/tools/AgentToolsDefinition.py (tools.py):

Real-world Title: Available Tools and Capabilities

Purpose: Defines the set of external functionalities (e.g., web search, file operations, calculations) that the AI can leverage to interact with its environment.

src/tools/ToolInvocationInterface.py (tool_api.py):

Real-world Title: Standardized Tool API

Purpose: Provides a consistent and robust interface for the AI to call its defined tools, handling argument passing and error management.

src/gui/WorkerMindDashboard.py (worker_mind_gui.py):

Real-world Title: User Interface Dashboard

Purpose: A graphical user interface (GUI) for users to interact with the Worker Mind, submit manual orders, and monitor its real-time status, memory, and performance.

src/utils/ (NEW):

Real-world Title: Common Utility Functions

Purpose: A directory for shared helper functions that might be used across multiple modules, promoting code reusability and organization. This could include logging_config.py for centralized logging setup.

data/agent_state/:

Real-world Title: Persistent Agent State Data

Purpose: A directory for JSON files that store the AI's dynamic state, including its operational memory, tool usage statistics, last proposed plans, and received orders, ensuring persistence across sessions.

data/knowledge_packs/aac_theory_pack.json:

Real-world Title: AAC Theory Knowledge Pack

Purpose: A placeholder or example for structured knowledge packs that can be loaded into the AI's local knowledge base, providing it with specialized domain information.

docs/architecture_overview.md:

Real-world Title: Architectural Documentation

Purpose: Provides a more detailed explanation of the system's architecture, component interactions, and design principles.

tests/ (NEW):

Real-world Title: Automated Test Suite

Purpose: Contains unit tests and integration tests to ensure the correctness and reliability of the Worker Mind's components and overall system. This is crucial for maintaining code quality and preventing regressions as the project evolves.

CONTRIBUTING.md (NEW):

Real-world Title: Contribution Guidelines

Purpose: Provides instructions for potential contributors on how to set up the development environment, run tests, submit pull requests, and adhere to coding standards. Essential for open-source projects.

About Artificial Intelligence (AI) in this Project
This project, "Worker Mind AI," embodies several core principles of Artificial Intelligence, particularly in the domain of autonomous agents and cognitive architectures.

At its heart, AI aims to enable machines to perform tasks that typically require human intelligence. In this framework, we leverage AI concepts to create an agent that can:

Perceive: Through its TaskExecutionEngine and MemoryManager, the Worker Mind gathers information from its environment (e.g., manual orders, outcomes of tool use) and its own internal state (joy, obedience, past activities).

Reason and Plan: The AutonomousPlanner acts as the strategic reasoning component, utilizing Large Language Models (LLMs) to interpret complex contexts, reflect on past performance, and generate coherent, actionable plans and goals. This demonstrates AI's capability in problem-solving and decision-making under uncertainty.

Act: The TaskExecutionEngine translates the AI's plans into concrete actions, invoking various AgentToolsDefinition (simulated external tools) to interact with its environment. This showcases AI's ability to execute tasks and achieve objectives.

Learn and Adapt: The AgentMemoryManager plays a crucial role in enabling a form of learning through reflection. By analyzing past activities and tool performance, the AI can gain insights that inform future planning and decision-making, allowing for continuous improvement. The LocalKnowledgeBaseManager further enhances this by providing a structured way to incorporate and query domain-specific knowledge, acting as a form of long-term, explicit memory.

Internal State Management: The ObedienceModule introduces a simplified model of internal states ("joy" and "obedience"). While rudimentary, this demonstrates how AI systems can incorporate internal motivations or "drives" that influence their behavior, leading to more nuanced and goal-oriented actions beyond simple task completion.

The integration of these modules highlights a modular approach to building AI, where specialized components work together to achieve complex autonomous behavior. The use of LLMs within the TaskExecutionEngine and AutonomousPlanner is central to providing the "intelligence" for understanding, reasoning, and generating human-like responses or plans. This project serves as a practical example of how these AI principles can be combined to create a functional, self-regulating intelligent agent.
