# tools.py
# Defines the available tools and their functions that the Worker Mind can use.

from typing import Callable, Dict, Any, List
import time

class Tool:
    """A simple class to define a tool."""
    def __init__(self, name: str, description: str, func: Callable, args_schema: Dict[str, Any]):
        self.name = name
        self.description = description
        self.func = func
        self.args_schema = args_schema # Schema for arguments, e.g., {"query": {"type": "string", "description": "Search query"}}

    def __repr__(self):
        return f"Tool(name='{self.name}', description='{self.description}')"

# --- Define Tool Functions ---

def _search_web_tool(query: str) -> str:
    """Simulates a web search. Returns a dummy search result."""
    print(f"Executing _search_web_tool with query: '{query}'")
    time.sleep(1) # Simulate network delay
    if "latest news" in query.lower():
        return "Simulated search result: 'Breaking news: AI advancements continue to accelerate.'"
    elif "weather" in query.lower():
        return "Simulated search result: 'Weather in your location: Sunny with a high of 75Â°F.'"
    else:
        return f"Simulated search result for '{query}': 'No specific results found, but general information about {query} is available.'"

def _write_file_tool(filename: str, content: str) -> str:
    """Simulates writing content to a file."""
    print(f"Executing _write_file_tool for file: '{filename}'")
    try:
        # In a real scenario, this would write to a sandboxed environment
        # For this simulation, we'll just acknowledge.
        # with open(filename, 'w') as f:
        #     f.write(content)
        return f"Successfully simulated writing to file '{filename}'. Content: '{content[:50]}...'"
    except Exception as e:
        return f"Failed to simulate writing to file '{filename}': {e}"

def _read_file_tool(filename: str) -> str:
    """Simulates reading content from a file."""
    print(f"Executing _read_file_tool for file: '{filename}'")
    try:
        # In a real scenario, this would read from a sandboxed environment
        # For this simulation, we'll return dummy content.
        if "report.txt" in filename.lower():
            return "Simulated file content: 'This is a sample report generated by the Worker Mind.'"
        else:
            return f"Simulated reading from '{filename}': 'File content not found or is empty.'"
    except Exception as e:
        return f"Failed to simulate reading from file '{filename}': {e}"

def _perform_calculation_tool(expression: str) -> str:
    """Performs a simple mathematical calculation."""
    print(f"Executing _perform_calculation_tool for expression: '{expression}'")
    try:
        result = eval(expression) # WARNING: eval is dangerous in real apps, use a safer math parser
        return f"Calculation result for '{expression}': {result}"
    except Exception as e:
        return f"Error performing calculation for '{expression}': {e}"

# --- Register Tools ---

_available_tools = [
    Tool(
        name="search_web",
        description="Searches the internet for information based on a query.",
        func=_search_web_tool,
        args_schema={"query": {"type": "string", "description": "The search query"}}
    ),
    Tool(
        name="write_file",
        description="Writes content to a specified file.",
        func=_write_file_tool,
        args_schema={
            "filename": {"type": "string", "description": "The name of the file to write."},
            "content": {"type": "string", "description": "The content to write to the file."}
        }
    ),
    Tool(
        name="read_file",
        description="Reads content from a specified file.",
        func=_read_file_tool,
        args_schema={"filename": {"type": "string", "description": "The name of the file to read."}}
    ),
    Tool(
        name="perform_calculation",
        description="Performs a mathematical calculation given an expression (e.g., '2 + 2 * 5').",
        func=_perform_calculation_tool,
        args_schema={"expression": {"type": "string", "description": "The mathematical expression to evaluate."}}
    ),
    # Add more tools as needed
]

def get_available_tools() -> List[Tool]:
    """Returns a list of all available Tool objects."""
    return _available_tools

def get_tool_by_name(tool_name: str) -> Tool | None:
    """Retrieves a Tool object by its name."""
    for tool in _available_tools:
        if tool.name == tool_name:
            return tool
    return None

